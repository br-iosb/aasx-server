/*
 * DotAAS Part 2 | HTTP/REST | Asset Administration Shell Repository
 *
 * An exemplary interface combination for the use case of an Asset Administration Shell Repository
 *
 * OpenAPI spec version: Final-Draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Certificate : IEquatable<Certificate>
    { 
        /// <summary>
        /// Gets or Sets BlobCertificate
        /// </summary>

        [DataMember(Name="blobCertificate")]
        public Blob BlobCertificate { get; set; }

        /// <summary>
        /// Gets or Sets ContainedExtension
        /// </summary>

        [DataMember(Name="containedExtension")]
        public List<Reference> ContainedExtension { get; set; }

        /// <summary>
        /// Gets or Sets LastCertificate
        /// </summary>

        [DataMember(Name="lastCertificate")]
        public bool? LastCertificate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Certificate {\n");
            sb.Append("  BlobCertificate: ").Append(BlobCertificate).Append("\n");
            sb.Append("  ContainedExtension: ").Append(ContainedExtension).Append("\n");
            sb.Append("  LastCertificate: ").Append(LastCertificate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Certificate)obj);
        }

        /// <summary>
        /// Returns true if Certificate instances are equal
        /// </summary>
        /// <param name="other">Instance of Certificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Certificate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BlobCertificate == other.BlobCertificate ||
                    BlobCertificate != null &&
                    BlobCertificate.Equals(other.BlobCertificate)
                ) && 
                (
                    ContainedExtension == other.ContainedExtension ||
                    ContainedExtension != null &&
                    ContainedExtension.SequenceEqual(other.ContainedExtension)
                ) && 
                (
                    LastCertificate == other.LastCertificate ||
                    LastCertificate != null &&
                    LastCertificate.Equals(other.LastCertificate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BlobCertificate != null)
                    hashCode = hashCode * 59 + BlobCertificate.GetHashCode();
                    if (ContainedExtension != null)
                    hashCode = hashCode * 59 + ContainedExtension.GetHashCode();
                    if (LastCertificate != null)
                    hashCode = hashCode * 59 + LastCertificate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Certificate left, Certificate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Certificate left, Certificate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
